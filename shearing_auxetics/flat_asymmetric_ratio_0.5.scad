// Generated by SolidPython 1.1.3 on 2024-06-27 12:35:24
$fn=32;


translate(v = [0, -18, 0]) {
	intersection() {
		union() {
			cube(size = 0);
			translate(v = [0.0, 0.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [0.6, 15.0, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [0.0, 0.6, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [18.0, 18.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [18.6, 33.0, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [18.0, 18.6, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [36.0, 36.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [36.6, 51.0, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [36.0, 36.6, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [54.0, 54.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [54.6, 69.0, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [54.0, 54.6, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [0.0, 18.0, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [14.4, 28.5, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [-3.0, 24.9, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [18.0, 36.0, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [32.4, 46.5, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [15.0, 42.9, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [36.0, 54.0, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [50.4, 64.5, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [33.0, 60.9, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [54.0, 72.0, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [68.4, 82.5, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [51.0, 78.9, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [0.0, 28.5, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [0.6, 43.5, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [0.0, 29.1, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [18.0, 46.5, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [18.6, 61.5, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [18.0, 47.1, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [36.0, 64.5, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [36.6, 79.5, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [36.0, 65.1, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [54.0, 82.5, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [54.6, 97.5, 0]) {
				rotate(a = [0, 0, 90]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [54.0, 83.1, 0]) {
				rotate(a = [0, 0, 180]) {
					union() {
						cube(size = [3, 0.6000000000, 4]);
						translate(v = [1, -1, 0]) {
							mirror(v = [1, 0, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
						translate(v = [2, -1, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
				}
			}
			translate(v = [0.0, 46.5, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [14.4, 57.0, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [-3.0, 53.4, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [18.0, 64.5, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [32.4, 75.0, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [15.0, 71.4, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [36.0, 82.5, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [50.4, 93.0, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [33.0, 89.4, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [54.0, 100.5, 0]) {
				cube(size = [15, 7.5000000000, 4]);
			}
			translate(v = [68.4, 111.0, 0]) {
				rotate(a = [0, 0, 180]) {
					rotate(a = [0, 0, 90]) {
						union() {
							cube(size = [3, 0.6000000000, 4]);
							translate(v = [1, -1, 0]) {
								mirror(v = [1, 0, 0]) {
									difference() {
										cube(size = [1, 1, 4]);
										cylinder(h = 4, r = 1);
									}
								}
							}
							translate(v = [2, -1, 0]) {
								difference() {
									cube(size = [1, 1, 4]);
									cylinder(h = 4, r = 1);
								}
							}
						}
					}
				}
			}
			translate(v = [51.0, 107.4, 0]) {
				union() {
					cube(size = [3, 0.6000000000, 4]);
					translate(v = [1, -1, 0]) {
						mirror(v = [1, 0, 0]) {
							difference() {
								cube(size = [1, 1, 4]);
								cylinder(h = 4, r = 1);
							}
						}
					}
					translate(v = [2, -1, 0]) {
						difference() {
							cube(size = [1, 1, 4]);
							cylinder(h = 4, r = 1);
						}
					}
				}
			}
			translate(v = [0.0, 57.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [18.0, 75.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [36.0, 93.0, 0]) {
				cube(size = [15, 15, 4]);
			}
			translate(v = [54.0, 111.0, 0]) {
				cube(size = [15, 15, 4]);
			}
		}
		translate(v = [0, 18, 0]) {
			cube(size = [69, 90.0000000000, 4]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import numpy as np

from solid import *
from solid.utils import *

COMPLIANCE_LENGTH = 3
COMPLIANCE_THICKNESS = 0.6
COMPLIANCE_FILLET_RADIUS = 1

X_SIZE, Y_SIZE, THICKNESS = 15, 15, 4
X_GRID, Y_GRID = 4, 5

ASYMMETRIC_RATIO = 0.5

w, h, rh = (
    X_SIZE + COMPLIANCE_LENGTH,
    Y_SIZE + COMPLIANCE_LENGTH,
    Y_SIZE * ASYMMETRIC_RATIO + COMPLIANCE_LENGTH,
)

xy_basis = np.arange(X_GRID)[:, np.newaxis] * [w, h]


def build_fillet(r, h):
    return cube([r, r, h]) - cylinder(r, h)


def build_linkage():
    linkage = cube([COMPLIANCE_LENGTH, COMPLIANCE_THICKNESS, THICKNESS])
    linkage += translate([COMPLIANCE_FILLET_RADIUS, -COMPLIANCE_FILLET_RADIUS, 0])(
        mirror([1, 0, 0])(build_fillet(COMPLIANCE_FILLET_RADIUS, THICKNESS))
    )
    linkage += translate(
        [COMPLIANCE_LENGTH - COMPLIANCE_FILLET_RADIUS, -COMPLIANCE_FILLET_RADIUS, 0]
    )(build_fillet(COMPLIANCE_FILLET_RADIUS, THICKNESS))

    return linkage


# build objects
a = cube(0)
x_linkage, y_linkage = build_linkage(), rotate([0, 0, 90])(build_linkage())


# base
for j in range(Y_GRID):
    if j % 2 == 0:
        ratio = 1
        y_linkage_offset = [COMPLIANCE_THICKNESS, Y_SIZE]
        y_linkage_model = y_linkage

        x_linkage_offset = [0, COMPLIANCE_THICKNESS]
        x_linkage_model = rotate([0, 0, 180])(x_linkage)
    else:
        ratio = ASYMMETRIC_RATIO
        y_linkage_offset = [
            X_SIZE - COMPLIANCE_THICKNESS,
            Y_SIZE * ratio + COMPLIANCE_LENGTH,
        ]
        y_linkage_model = rotate([0, 0, 180])(y_linkage)

        x_linkage_offset = [-COMPLIANCE_LENGTH, Y_SIZE * ratio - COMPLIANCE_THICKNESS]
        x_linkage_model = x_linkage

    xy_offset = [0, (j // 2) * rh + (j - j // 2) * h]

    for xy in xy_basis:
        a += translate([*(xy + xy_offset), 0])(
            cube([X_SIZE, Y_SIZE * ratio, THICKNESS])
        )

        # vertical linkages
        if (j + 1) < Y_GRID:
            a += translate([*(xy + xy_offset + y_linkage_offset), 0])(y_linkage_model)
            a += translate([*(xy + xy_offset + x_linkage_offset), 0])(x_linkage_model)


# intersect
region = cube(
    [
        X_GRID * w - COMPLIANCE_LENGTH,
        (Y_GRID // 2) * (h + rh) - COMPLIANCE_LENGTH + (X_GRID - 2) * w,
        THICKNESS,
    ]
)
a *= translate([0, h, 0])(region)
a = translate([0, -h, 0])(a)

scad_render_to_file(
    a,
    f"./shearing_auxetics/flat_asymmetric_ratio_{ASYMMETRIC_RATIO}.scad",
    file_header="$fn=32;",
)
 
 
************************************************/
